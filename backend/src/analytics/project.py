import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder

#Загрузка таблиц
file_path = "backend/src/Таблицы/2024-10-30 Zakalivanie i zimnee plavanie.xlsx"
initial_df = pd.read_excel(file_path)
df = initial_df.copy()

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Предобработка данных
#Замена названия столбцов на более короткое
df.drop("Наше социологическое исследование посвящено изучению вопросов, связанных с мотивацией и популяризацией закаливания организма. Пройти опрос можно только один раз. Просим Вас ответить на вопросы и благодарим за участие.", axis=1, inplace=True)
short_column_names = [
    'Закаливание_мнение', 'Мотив_иммунитет', 'Мотив_адаптация', 
    'Мотив_системы', 'Мотив_обмен', 'Мотив_работоспособность', 'Мотив_ЗОЖ', 
    'Мотив_спорт', 'Мотив_соревнования', 'Мотив_жизненная_ситуация', 'Мотив_вызов',
    'Фактор_непонимание', 'Фактор_негативный_опыт', 'Фактор_отсутствие_поддержки',
    'Фактор_информация', 'Фактор_страх', 'Фактор_время', 'Фактор_инфраструктура',
    'Фактор_удаленность', 'Фактор_инструкторы', 'Возраст_начала', 'Эффект_самочувствие',
    'Эффект_заболеваемость', 'Эффект_работоспособность', 'Эффект_организм',
    'Эффект_устойчивость', 'Эффект_органы', 'Эффект_ремиссия', 'Эффект_энергия',
    'Эффект_качество_жизни', 'Психоэффект_стресс', 'Психоэффект_самоконтроль',
    'Психоэффект_настроение', 'Психоэффект_привычка', 'Психоэффект_память', 'Психоэффект_тревога',
    'Уверенность_адаптация', 'Типы_обтирание', 'Типы_обливание', 'Типы_душ',
    'Типы_босохождение', 'Типы_баня', 'Типы_воздух', 'Типы_бег', 'Типы_прорубь',
    'Типы_плавание', 'Период_практики', 'Частота_практики', 'Перерывы_практики', 
    'Способ_практики', 'Сочетание_баня', 'Источники_интернет_статьи', 'Источники_соцсети',
    'Источники_рассылка', 'Источники_литература', 'Источники_консультации', 
    'Источники_советы', 'Источники_мероприятия', 'Метод_онлайн_ресурсы',
    'Метод_соцсети', 'Метод_семинары', 'Метод_группы', 'Метод_информационные_материалы',
    'Метод_сотрудничество', 'Метод_мессенджеры', 'Пол', 'Возраст', 'Регион',
    'Семейное_положение', 'Деятельность', 'Образование', 'Профессия'
]
df.columns = short_column_names
df = df.fillna("Не указано")
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#Обработка таблицы для корреляции
correlation_table = df.copy()
encoding_dict = {}

# Задаем диапазоны столбцов
columns_to_encode = list(correlation_table.columns[:21]) + list(correlation_table.columns[36:])

# Обработка каждого столбца из заданного диапазона
for column in columns_to_encode:
    # Инициализация LabelEncoder
    encoder = LabelEncoder()
    
    # Применяем LabelEncoder к столбцу
    correlation_table[column] = encoder.fit_transform(correlation_table[column])
    
    # Создаем словарь для столбца, где ключ - оригинальное значение, значение - закодированное значение
    encoding_dict[column] = dict(zip(encoder.classes_, encoder.transform(encoder.classes_)))
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------

df.to_excel("Обработанная таблица zakalivanie i zimnee plavanie.xlsx", index=False)
